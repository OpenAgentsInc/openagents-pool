// @generated by protobuf-ts 2.9.4 with parameter long_type_number,server_generic
// @generated from protobuf file "rpc.proto" (syntax proto3)
// tslint:disable
import { RpcGetEventsResponse } from "./rpc";
import { RpcGetEventsRequest } from "./rpc";
import { RpcUnsubscribeToEventsResponse } from "./rpc";
import { RpcUnsubscribeToEventsRequest } from "./rpc";
import { RpcSubscribeToEventsResponse } from "./rpc";
import { RpcSubscribeToEventsRequest } from "./rpc";
import { RpcSendSignedEventResponse } from "./rpc";
import { RpcSendSignedEventRequest } from "./rpc";
import { RpcJobLog } from "./rpc";
import { RpcJobComplete } from "./rpc";
import { RpcJobOutput } from "./rpc";
import { RpcCancelJob } from "./rpc";
import { RpcAcceptJob } from "./rpc";
import { RpcIsJobDone } from "./rpc";
import { PendingJobs } from "./rpc";
import { RpcGetPendingJobs } from "./rpc";
import { RpcGetJob } from "./rpc";
import { Job } from "./Protocol";
import { RpcRequestJob } from "./rpc";
import { ServerCallContext } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service NostrConnector
 */
export interface INostrConnector<T = ServerCallContext> {
    /**
     * job management
     *
     * @generated from protobuf rpc: requestJob(RpcRequestJob) returns (Job);
     */
    requestJob(request: RpcRequestJob, context: T): Promise<Job>;
    /**
     * @generated from protobuf rpc: getJob(RpcGetJob) returns (Job);
     */
    getJob(request: RpcGetJob, context: T): Promise<Job>;
    /**
     * @generated from protobuf rpc: getPendingJobs(RpcGetPendingJobs) returns (PendingJobs);
     */
    getPendingJobs(request: RpcGetPendingJobs, context: T): Promise<PendingJobs>;
    /**
     * @generated from protobuf rpc: isJobDone(RpcGetJob) returns (RpcIsJobDone);
     */
    isJobDone(request: RpcGetJob, context: T): Promise<RpcIsJobDone>;
    /**
     * @generated from protobuf rpc: acceptJob(RpcAcceptJob) returns (Job);
     */
    acceptJob(request: RpcAcceptJob, context: T): Promise<Job>;
    /**
     * @generated from protobuf rpc: cancelJob(RpcCancelJob) returns (Job);
     */
    cancelJob(request: RpcCancelJob, context: T): Promise<Job>;
    /**
     * @generated from protobuf rpc: outputForJob(RpcJobOutput) returns (Job);
     */
    outputForJob(request: RpcJobOutput, context: T): Promise<Job>;
    /**
     * @generated from protobuf rpc: completeJob(RpcJobComplete) returns (Job);
     */
    completeJob(request: RpcJobComplete, context: T): Promise<Job>;
    /**
     * @generated from protobuf rpc: logForJob(RpcJobLog) returns (Job);
     */
    logForJob(request: RpcJobLog, context: T): Promise<Job>;
    /**
     * generic nostr events
     *
     * @generated from protobuf rpc: sendSignedEvent(RpcSendSignedEventRequest) returns (RpcSendSignedEventResponse);
     */
    sendSignedEvent(request: RpcSendSignedEventRequest, context: T): Promise<RpcSendSignedEventResponse>;
    /**
     * @generated from protobuf rpc: subscribeToEvents(RpcSubscribeToEventsRequest) returns (RpcSubscribeToEventsResponse);
     */
    subscribeToEvents(request: RpcSubscribeToEventsRequest, context: T): Promise<RpcSubscribeToEventsResponse>;
    /**
     * @generated from protobuf rpc: unsubscribeToEvents(RpcUnsubscribeToEventsRequest) returns (RpcUnsubscribeToEventsResponse);
     */
    unsubscribeToEvents(request: RpcUnsubscribeToEventsRequest, context: T): Promise<RpcUnsubscribeToEventsResponse>;
    /**
     * @generated from protobuf rpc: getEvents(RpcGetEventsRequest) returns (RpcGetEventsResponse);
     */
    getEvents(request: RpcGetEventsRequest, context: T): Promise<RpcGetEventsResponse>;
}
