// @generated by protobuf-ts 2.9.4 with parameter long_type_number,server_generic
// @generated from protobuf file "JobState.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Log } from "./Log";
import { JobStatus } from "./JobStatus";
/**
 * @generated from protobuf message JobState
 */
export interface JobState {
    /**
     * @generated from protobuf field: uint64 acceptedAt = 13;
     */
    acceptedAt: number;
    /**
     * @generated from protobuf field: string acceptedBy = 14;
     */
    acceptedBy: string;
    /**
     * @generated from protobuf field: JobStatus status = 15;
     */
    status: JobStatus;
    /**
     * @generated from protobuf field: repeated Log logs = 17;
     */
    logs: Log[];
    /**
     * @generated from protobuf field: uint64 timestamp = 18;
     */
    timestamp: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class JobState$Type extends MessageType<JobState> {
    constructor() {
        super("JobState", [
            { no: 13, name: "acceptedAt", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 14, name: "acceptedBy", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "status", kind: "enum", T: () => ["JobStatus", JobStatus] },
            { no: 17, name: "logs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Log },
            { no: 18, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<JobState>): JobState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.acceptedAt = 0;
        message.acceptedBy = "";
        message.status = 0;
        message.logs = [];
        message.timestamp = 0;
        if (value !== undefined)
            reflectionMergePartial<JobState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobState): JobState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 acceptedAt */ 13:
                    message.acceptedAt = reader.uint64().toNumber();
                    break;
                case /* string acceptedBy */ 14:
                    message.acceptedBy = reader.string();
                    break;
                case /* JobStatus status */ 15:
                    message.status = reader.int32();
                    break;
                case /* repeated Log logs */ 17:
                    message.logs.push(Log.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint64 timestamp */ 18:
                    message.timestamp = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 acceptedAt = 13; */
        if (message.acceptedAt !== 0)
            writer.tag(13, WireType.Varint).uint64(message.acceptedAt);
        /* string acceptedBy = 14; */
        if (message.acceptedBy !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.acceptedBy);
        /* JobStatus status = 15; */
        if (message.status !== 0)
            writer.tag(15, WireType.Varint).int32(message.status);
        /* repeated Log logs = 17; */
        for (let i = 0; i < message.logs.length; i++)
            Log.internalBinaryWrite(message.logs[i], writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* uint64 timestamp = 18; */
        if (message.timestamp !== 0)
            writer.tag(18, WireType.Varint).uint64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message JobState
 */
export const JobState = new JobState$Type();
