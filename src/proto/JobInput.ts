// @generated by protobuf-ts 2.9.4 with parameter long_type_number,server_generic
// @generated from protobuf file "JobInput.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message JobInput
 */
export interface JobInput {
    /**
     * @generated from protobuf field: optional string data = 1;
     */
    data?: string;
    /**
     * @generated from protobuf field: optional string ref = 2;
     */
    ref?: string;
    /**
     * @generated from protobuf field: string type = 3;
     */
    type: string;
    /**
     * @generated from protobuf field: string marker = 4;
     */
    marker: string;
    /**
     * @generated from protobuf field: optional string source = 5;
     */
    source?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class JobInput$Type extends MessageType<JobInput> {
    constructor() {
        super("JobInput", [
            { no: 1, name: "data", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ref", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "marker", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "source", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JobInput>): JobInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.marker = "";
        if (value !== undefined)
            reflectionMergePartial<JobInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobInput): JobInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string data */ 1:
                    message.data = reader.string();
                    break;
                case /* optional string ref */ 2:
                    message.ref = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                case /* string marker */ 4:
                    message.marker = reader.string();
                    break;
                case /* optional string source */ 5:
                    message.source = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string data = 1; */
        if (message.data !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.data);
        /* optional string ref = 2; */
        if (message.ref !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.ref);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        /* string marker = 4; */
        if (message.marker !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.marker);
        /* optional string source = 5; */
        if (message.source !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.source);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message JobInput
 */
export const JobInput = new JobInput$Type();
