// @generated by protobuf-ts 2.9.4 with parameter long_type_number,server_generic
// @generated from protobuf file "Protocol.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message JobInput
 */
export interface JobInput {
    /**
     * @generated from protobuf field: optional string data = 1;
     */
    data?: string;
    /**
     * @generated from protobuf field: optional string ref = 2;
     */
    ref?: string;
    /**
     * @generated from protobuf field: string type = 3;
     */
    type: string;
    /**
     * @generated from protobuf field: string marker = 4;
     */
    marker: string;
    /**
     * @generated from protobuf field: optional string source = 5;
     */
    source?: string;
}
/**
 * @generated from protobuf message Log
 */
export interface Log {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string log = 2;
     */
    log: string;
    /**
     * @generated from protobuf field: string level = 3;
     */
    level: string;
    /**
     * @generated from protobuf field: uint64 timestamp = 4;
     */
    timestamp: number;
    /**
     * @generated from protobuf field: string source = 5;
     */
    source: string;
}
/**
 * @generated from protobuf message JobState
 */
export interface JobState {
    /**
     * @generated from protobuf field: uint64 acceptedAt = 13;
     */
    acceptedAt: number;
    /**
     * @generated from protobuf field: string acceptedBy = 14;
     */
    acceptedBy: string;
    /**
     * @generated from protobuf field: Status status = 15;
     */
    status: Status;
    /**
     * @generated from protobuf field: repeated Log logs = 17;
     */
    logs: Log[];
    /**
     * @generated from protobuf field: uint64 timestamp = 18;
     */
    timestamp: number; // repeated string partials = 16;
}
/**
 * @generated from protobuf message JobResult
 */
export interface JobResult {
    /**
     * @generated from protobuf field: string content = 1;
     */
    content: string;
    /**
     * @generated from protobuf field: uint64 timestamp = 2;
     */
    timestamp: number;
    /**
     * @generated from protobuf field: string id = 3;
     */
    id: string;
}
/**
 * @generated from protobuf message Job
 */
export interface Job {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string runOn = 2;
     */
    runOn: string;
    /**
     * @generated from protobuf field: uint64 expiration = 3;
     */
    expiration: number;
    /**
     * @generated from protobuf field: uint64 timestamp = 4;
     */
    timestamp: number;
    /**
     * @generated from protobuf field: repeated JobInput input = 5;
     */
    input: JobInput[]; // primary input
    /**
     * @generated from protobuf field: string customerPublicKey = 7;
     */
    customerPublicKey: string;
    /**
     * @generated from protobuf field: string description = 8;
     */
    description: string;
    /**
     * @generated from protobuf field: string provider = 9;
     */
    provider: string;
    /**
     * @generated from protobuf field: repeated string relays = 10;
     */
    relays: string[];
    /**
     * @generated from protobuf field: JobResult result = 12;
     */
    result?: JobResult;
    /**
     * @generated from protobuf field: JobState state = 11;
     */
    state?: JobState;
}
/**
 * @generated from protobuf enum Status
 */
export enum Status {
    /**
     * @generated from protobuf enum value: PENDING = 0;
     */
    PENDING = 0,
    /**
     * @generated from protobuf enum value: PROCESSING = 1;
     */
    PROCESSING = 1,
    /**
     * @generated from protobuf enum value: ERROR = 2;
     */
    ERROR = 2,
    /**
     * @generated from protobuf enum value: SUCCESS = 3;
     */
    SUCCESS = 3,
    /**
     * @generated from protobuf enum value: PARTIAL = 4;
     */
    PARTIAL = 4,
    /**
     * @generated from protobuf enum value: DELEGATED = 5;
     */
    DELEGATED = 5,
    /**
     * @generated from protobuf enum value: RESULTS = 6;
     */
    RESULTS = 6,
    /**
     * @generated from protobuf enum value: PAYMENT_REQUIRED = 7;
     */
    PAYMENT_REQUIRED = 7,
    /**
     * @generated from protobuf enum value: UNKNOWN = 99;
     */
    UNKNOWN = 99
}
// @generated message type with reflection information, may provide speed optimized methods
class JobInput$Type extends MessageType<JobInput> {
    constructor() {
        super("JobInput", [
            { no: 1, name: "data", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ref", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "marker", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "source", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JobInput>): JobInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.marker = "";
        if (value !== undefined)
            reflectionMergePartial<JobInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobInput): JobInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string data */ 1:
                    message.data = reader.string();
                    break;
                case /* optional string ref */ 2:
                    message.ref = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                case /* string marker */ 4:
                    message.marker = reader.string();
                    break;
                case /* optional string source */ 5:
                    message.source = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string data = 1; */
        if (message.data !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.data);
        /* optional string ref = 2; */
        if (message.ref !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.ref);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        /* string marker = 4; */
        if (message.marker !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.marker);
        /* optional string source = 5; */
        if (message.source !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.source);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message JobInput
 */
export const JobInput = new JobInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Log$Type extends MessageType<Log> {
    constructor() {
        super("Log", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "log", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "level", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "source", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Log>): Log {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.log = "";
        message.level = "";
        message.timestamp = 0;
        message.source = "";
        if (value !== undefined)
            reflectionMergePartial<Log>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Log): Log {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string log */ 2:
                    message.log = reader.string();
                    break;
                case /* string level */ 3:
                    message.level = reader.string();
                    break;
                case /* uint64 timestamp */ 4:
                    message.timestamp = reader.uint64().toNumber();
                    break;
                case /* string source */ 5:
                    message.source = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Log, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string log = 2; */
        if (message.log !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.log);
        /* string level = 3; */
        if (message.level !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.level);
        /* uint64 timestamp = 4; */
        if (message.timestamp !== 0)
            writer.tag(4, WireType.Varint).uint64(message.timestamp);
        /* string source = 5; */
        if (message.source !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.source);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Log
 */
export const Log = new Log$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobState$Type extends MessageType<JobState> {
    constructor() {
        super("JobState", [
            { no: 13, name: "acceptedAt", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 14, name: "acceptedBy", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "status", kind: "enum", T: () => ["Status", Status] },
            { no: 17, name: "logs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Log },
            { no: 18, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<JobState>): JobState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.acceptedAt = 0;
        message.acceptedBy = "";
        message.status = 0;
        message.logs = [];
        message.timestamp = 0;
        if (value !== undefined)
            reflectionMergePartial<JobState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobState): JobState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 acceptedAt */ 13:
                    message.acceptedAt = reader.uint64().toNumber();
                    break;
                case /* string acceptedBy */ 14:
                    message.acceptedBy = reader.string();
                    break;
                case /* Status status */ 15:
                    message.status = reader.int32();
                    break;
                case /* repeated Log logs */ 17:
                    message.logs.push(Log.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint64 timestamp */ 18:
                    message.timestamp = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 acceptedAt = 13; */
        if (message.acceptedAt !== 0)
            writer.tag(13, WireType.Varint).uint64(message.acceptedAt);
        /* string acceptedBy = 14; */
        if (message.acceptedBy !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.acceptedBy);
        /* Status status = 15; */
        if (message.status !== 0)
            writer.tag(15, WireType.Varint).int32(message.status);
        /* repeated Log logs = 17; */
        for (let i = 0; i < message.logs.length; i++)
            Log.internalBinaryWrite(message.logs[i], writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* uint64 timestamp = 18; */
        if (message.timestamp !== 0)
            writer.tag(18, WireType.Varint).uint64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message JobState
 */
export const JobState = new JobState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobResult$Type extends MessageType<JobResult> {
    constructor() {
        super("JobResult", [
            { no: 1, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JobResult>): JobResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.content = "";
        message.timestamp = 0;
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<JobResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobResult): JobResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content */ 1:
                    message.content = reader.string();
                    break;
                case /* uint64 timestamp */ 2:
                    message.timestamp = reader.uint64().toNumber();
                    break;
                case /* string id */ 3:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content = 1; */
        if (message.content !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.content);
        /* uint64 timestamp = 2; */
        if (message.timestamp !== 0)
            writer.tag(2, WireType.Varint).uint64(message.timestamp);
        /* string id = 3; */
        if (message.id !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message JobResult
 */
export const JobResult = new JobResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Job$Type extends MessageType<Job> {
    constructor() {
        super("Job", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "runOn", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "expiration", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "input", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => JobInput },
            { no: 7, name: "customerPublicKey", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "provider", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "relays", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "result", kind: "message", T: () => JobResult },
            { no: 11, name: "state", kind: "message", T: () => JobState }
        ]);
    }
    create(value?: PartialMessage<Job>): Job {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.runOn = "";
        message.expiration = 0;
        message.timestamp = 0;
        message.input = [];
        message.customerPublicKey = "";
        message.description = "";
        message.provider = "";
        message.relays = [];
        if (value !== undefined)
            reflectionMergePartial<Job>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Job): Job {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string runOn */ 2:
                    message.runOn = reader.string();
                    break;
                case /* uint64 expiration */ 3:
                    message.expiration = reader.uint64().toNumber();
                    break;
                case /* uint64 timestamp */ 4:
                    message.timestamp = reader.uint64().toNumber();
                    break;
                case /* repeated JobInput input */ 5:
                    message.input.push(JobInput.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string customerPublicKey */ 7:
                    message.customerPublicKey = reader.string();
                    break;
                case /* string description */ 8:
                    message.description = reader.string();
                    break;
                case /* string provider */ 9:
                    message.provider = reader.string();
                    break;
                case /* repeated string relays */ 10:
                    message.relays.push(reader.string());
                    break;
                case /* JobResult result */ 12:
                    message.result = JobResult.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                case /* JobState state */ 11:
                    message.state = JobState.internalBinaryRead(reader, reader.uint32(), options, message.state);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Job, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string runOn = 2; */
        if (message.runOn !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.runOn);
        /* uint64 expiration = 3; */
        if (message.expiration !== 0)
            writer.tag(3, WireType.Varint).uint64(message.expiration);
        /* uint64 timestamp = 4; */
        if (message.timestamp !== 0)
            writer.tag(4, WireType.Varint).uint64(message.timestamp);
        /* repeated JobInput input = 5; */
        for (let i = 0; i < message.input.length; i++)
            JobInput.internalBinaryWrite(message.input[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string customerPublicKey = 7; */
        if (message.customerPublicKey !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.customerPublicKey);
        /* string description = 8; */
        if (message.description !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.description);
        /* string provider = 9; */
        if (message.provider !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.provider);
        /* repeated string relays = 10; */
        for (let i = 0; i < message.relays.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.relays[i]);
        /* JobResult result = 12; */
        if (message.result)
            JobResult.internalBinaryWrite(message.result, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* JobState state = 11; */
        if (message.state)
            JobState.internalBinaryWrite(message.state, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Job
 */
export const Job = new Job$Type();
